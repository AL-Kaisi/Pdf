#!/usr/bin/env python3
"""
Script to organize extracted PDF content into the website structure.
This script takes the markdown files generated by extract_pdf_with_ollama.py
and formats them into HTML content for the website.
"""

import os
import re
import argparse
import shutil
from pathlib import Path

def split_english_arabic(content):
    """Split content into English and Arabic parts based on the marker."""
    parts = content.split("ARABIC TRANSLATION:")
    if len(parts) == 2:
        return parts[0].strip(), parts[1].strip()
    return content, ""  # If no Arabic translation found

def markdown_to_html(markdown_text):
    """
    Convert basic markdown to HTML
    Note: This is a simple implementation. For more complex markdown,
    consider using a library like markdown2
    """
    # Convert headers
    html = re.sub(r'^# (.*?)$', r'<h2>\1</h2>', markdown_text, flags=re.MULTILINE)
    html = re.sub(r'^## (.*?)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
    html = re.sub(r'^### (.*?)$', r'<h4>\1</h4>', html, flags=re.MULTILINE)
    
    # Convert bullet points
    html = re.sub(r'^\* (.*?)$', r'<li>\1</li>', html, flags=re.MULTILINE)
    html = re.sub(r'(<li>.*?</li>\n)+', r'<ul>\n\g<0></ul>\n', html, flags=re.DOTALL)
    
    # Convert paragraphs
    paragraphs = re.split(r'\n\n+', html)
    html = ""
    for p in paragraphs:
        if not p.startswith('<h') and not p.startswith('<ul') and p.strip():
            html += f"<p>{p}</p>\n\n"
        else:
            html += p + "\n\n"
    
    return html

def create_html_content(english_content, arabic_content, section_id):
    """Create HTML content with English and Arabic versions for the website."""
    english_html = markdown_to_html(english_content)
    arabic_html = markdown_to_html(arabic_content)
    
    html = f"""
    <div class="content-section" id="{section_id}">
        <span class="en">
            {english_html}
        </span>
        <span class="ar">
            {arabic_html}
        </span>
    </div>
    """
    
    return html

def organize_content(extracted_dir, website_dir):
    """Organize the extracted content into the website structure."""
    # Create directories if they don't exist
    en_content_dir = os.path.join(website_dir, "en")
    ar_content_dir = os.path.join(website_dir, "ar")
    images_dir = os.path.join(website_dir, "images")
    
    os.makedirs(en_content_dir, exist_ok=True)
    os.makedirs(ar_content_dir, exist_ok=True)
    os.makedirs(images_dir, exist_ok=True)
    
    # Process each content file
    content_files = sorted([f for f in os.listdir(extracted_dir) 
                           if f.startswith("page_") and f.endswith("_content.md")])
    
    all_en_content = []
    all_ar_content = []
    
    for i, file_name in enumerate(content_files):
        file_path = os.path.join(extracted_dir, file_name)
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Split content into English and Arabic
        english_content, arabic_content = split_english_arabic(content)
        
        # Create section ID
        section_id = f"section-{i+1}"
        
        # Format into HTML
        html_content = create_html_content(english_content, arabic_content, section_id)
        
        # Save as individual section files
        with open(os.path.join(en_content_dir, f"section_{i+1}.html"), 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        # Collect for combined files
        all_en_content.append(html_content)
        all_ar_content.append(html_content)
    
    # Create combined content files
    with open(os.path.join(en_content_dir, "all_content.html"), 'w', encoding='utf-8') as f:
        f.write("\n".join(all_en_content))
        
    # Copy images to the website directory
    extracted_images_dir = os.path.join(extracted_dir, "images")
    if os.path.exists(extracted_images_dir):
        for img_file in os.listdir(extracted_images_dir):
            src_path = os.path.join(extracted_images_dir, img_file)
            dst_path = os.path.join(images_dir, img_file)
            shutil.copy2(src_path, dst_path)
            print(f"Copied image: {img_file}")
    
    # Process image analyses
    image_analyses = sorted([f for f in os.listdir(extracted_dir) 
                            if f.startswith("image_") and f.endswith("_analysis.md")])
    
    for i, file_name in enumerate(image_analyses):
        file_path = os.path.join(extracted_dir, file_name)
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Split content into English and Arabic
        english_content, arabic_content = split_english_arabic(content)
        
        # Create HTML for image description
        image_basename = f"page{i+1}_img{i}.jpg"  # This assumes naming format from extraction
        
        image_html = f"""
        <div class="image-container" id="image-{i+1}">
            <img src="../images/{image_basename}" alt="Diagram {i+1}" class="content-image">
            <div class="image-description">
                <span class="en">
                    <h4>Figure {i+1}</h4>
                    {markdown_to_html(english_content)}
                </span>
                <span class="ar">
                    <h4>الشكل {i+1}</h4>
                    {markdown_to_html(arabic_content)}
                </span>
            </div>
        </div>
        """
        
        # Save image description
        with open(os.path.join(images_dir, f"image_{i+1}_description.html"), 'w', encoding='utf-8') as f:
            f.write(image_html)

def main():
    parser = argparse.ArgumentParser(description="Organize extracted PDF content into website structure")
    parser.add_argument("extracted_dir", help="Directory with extracted content")
    parser.add_argument("--website-dir", default=".", help="Root directory of the website")
    args = parser.parse_args()
    
    organize_content(args.extracted_dir, args.website_dir)
    print(f"Content organized into website structure at {args.website_dir}")

if __name__ == "__main__":
    main()